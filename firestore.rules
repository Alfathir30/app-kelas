rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read their own data, owners/editors can read all
    match /users/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         resource.data.role in ['owner', 'editor']);
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'editor']);
    }
    
    // Piket schedules - owners/editors can CRUD, users can only read
    match /piket_schedules/{scheduleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'editor'];
    }
    
    // Lesson schedules - owners/editors can CRUD, users can only read
    match /lesson_schedules/{scheduleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'editor'];
    }
    
    // Tasks - owners/editors can CRUD, users can read and update completion status
    match /tasks/{taskId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'editor'];
      allow update: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'editor'] ||
         (request.auth.uid in resource.data.assignedTo && 
          request.writeFields.hasOnly(['completed', 'updatedAt'])));
    }
    
    // Summary data - owners/editors can CRUD, users can only read
    match /summary/{summaryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['owner', 'editor'];
    }
  }
}
